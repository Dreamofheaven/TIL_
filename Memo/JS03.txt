for of 는 요소의 순서를 순회하는 문법
for of는 객체로는 사용할 수 없다.
for of는 순서를 보장해야하는데, 객체는 순서가 없음 딕셔너리에 순서가 없었던 것처럼

1. functions
함수란 무엇인지?
자바스크립에서 함수를 어떻게 작성하고 사용하는지?

<함수의 구조>
- 함수의 이름 
- 함수의 매개변수
- 함수의 body를 구성하는 statement

자바스크립트에서느 function 키워드를 사용
함수의 매개변수, 인자가 몇개 들어갈지 정의
중괄호가 시작이 된다.-> 바디 
바디 안에 들어갈 코드를 작성합니다.
스코프는 중괄호로 나누니까
함수는 return이 있어야한다. 없으면 undefined를 반환

1-2. 함수의 정의
자바스크립트에서는 함수를 만드는 방법이 2가지가 있음

1) 선언식
함수만 있음

2) 표현식
변수에 할당하는 식
const로 시작하는 키워드가 있음 

=> 표현식에는 함수 이름이 없음, <익명함수>라고 한다.
익명함수를 쓰는 이유는 표현식은 변수의 이름을 함수의 이름으로 
사용하기 때문이다. 변수 할당 방식의 로직을 따라간다.

선언식은 익명함수를 사용할 수 없다.

<선언식 예시>
함수가 인자를 2개 받아서 더한값을 리턴해주는 함수

function add (num1, num2) {
  return num1 + num2
}

console.log(add(3, 9))

<표현식 예시>
const sub = function (num1, num2) {
    return num1 - num2
}

console.log(sub(3, 9))

<함수 표현식의 특징>
-> 익명함수 사용, 호이스팅이 안된다. 변수의 선언만 끌어올려지는게 호이스팅임
함수의 호이스팅은 선언식에서 일어난다. 
사용 권장 / 함수가 선언되지 전에 접근할 수 없다. 

<함수 선언식의 특징>
함수 호이스팅이 된다. 함수가 끌어올려진다.
정의를 안하고 그냥 호출했는데 밑에 있는 함수를 끌어올려진다.
코드 유지보수 관점에서는 좋지 않는 관점이다.

// 기본 함수 매개변수
const greeting = function (name = 'Anonymous') {
  return 'Hi ${name}'
}

console.log(greeting())

// 매개변수 개수와 인자 개수의 불일치 상황
const noArgs = function () {
  return 0
}

console.log(noArgs(1, 2, 3))

=> 함수에는 인자를 정의를 안했는데, 호출할 때 인자를 넣었다.
에러가 나지 않고, 무시한다. 

const twoArgs = function (num1, num2) {
  return [num1, num2]
}

console.log(twoArgs(1, 2, 3))

=> 에러를 내지 않고, 개수가 넘어가는 애는 그냥 버림 

=> 매개변수가 3개인데 사용자가 1개만 넣어서 호출했을 때, 
비어있는 부분은 undefined로 처리된다. 

가변인자는 튜플로 받았다. 개수가 정해져있지 않는 인자
정해져 있지 않는 키워드 인자가 딕셔너리

<rest parameters>
...으로 표현
2개까지는 넣어줘야하고 나머지는 ...인데 이후인자는 배열로 처리
주의사항 : 가변인자를 받으면, 위치인자 이후에 써야한다.

//나머지 매개변수
const myFunc = function (num1, num2, ...restArgs) {
  return [num1, num2, restArgs]
}

console.log(myFunc(1, 2, 3, 4, 5))
console.log(myFunc(1, 2))

<화살표 함수 표현식>



2. object
키로 구분된 데이터 집합을 저장하는 자료형 
js는 객체지향언어, 이것은 객체지형언어의 객체가 아님
자료형으로서의 객체이다. 

<객체의 구조>
const user = {
  name: 'Sopia',
  age: 30,
  'key with space': true,
}

//조회(점 표기법, 대괄호 표기법)
console.log(user.age)
console.log(user['key with space'])
console.log(user['age'])

//추가
user.address = 'korea'
console.log(user)

//수정 
user.age = 40
console.log(user)

//삭제
delete user.address

//in 연산자
console.log('age' in user) //boolean으로 리턴됨
console.log('country' in user)

객체를 만들 때, 객체의 키와 밸류가 같은 경우

const age = 30
const address = 'korea'

const oldUser = {
  age: age,
  address: address,
}

=>키와 밸류가 같은 경우, 

const newUser = {
  age,
  address,
}

-> 이렇게 축약해서 씀 , 단축 property

//계산된 property
const a = 'hello'
const b = 'bye'

const bag = {
  [a]: 5, // 위의 const a 변수 값의 변화에 따라 key도 바뀐다.
}
console.log(bag)

=> 생각을 해보면 키가 항상 고정된 값이다.
위에 만든 객체들의 특징을 보면, 계속 name, age
그런데 이 키의 이름을 다이나믹하게 바꾸고 싶다. (계산된 속성)

const product = prompt('물건 이름을 입력해주세요.') //input

const bag = {
  [product]: 5,
}

console.log(bag)

//계산된 속성_연산
const product = prompt('물~~')
const a = 'my'
const b = 'property'

const bag = {
  [product]: 5,
  [a + b]: true,
}

console.log(bag)

3. 객체와 함수 
메서드와 함수의 차이는? 

//함수
def hello():
  return 'hello'

hello()

//메서드
class User:
  # 인스턴스 메서드 
  def hello():
    return 'hello'

user = User()
user.hello()

=> 함수를 단독으로 사용하느냐, 어떤 객체에 의해서 호출을 하느냐?
결국 둘다 함수는 맞다. 
메서드 사용법은 => 객체.메서드() / 객체.행동()

my_list = [1, 2, 3]
my_list.append() //메서드

//Method : 객체의 속성에 정의된 함수
메서드는 객체가 행동할 수 있게 함 / 로직을 작성할 수 있는 것임

const person = {
  name: 'Sophia',
  greeting: function () {
    return 'Hello'
 },
}

// greeting 메서드 호출
console.log(person.greeting()) //Hello

조작, 행동->연산->무엇을?
객체의 속성을 활용

class User:
  a = 'aaa'
  # 인스턴스 메서드
  def hello(self):
      return 'hello'
  },
}

//자기를 지칭하는거
const person = {
  name: 'Sophia',
  greeting: function () {
    return 'Hello, ${this}' //this가 person 자기자신을 지칭하는거임
 },
}

js에서 this는 함수를 호출하는 방법에 따라 가리키는 대상이 다름
1. 단순 호출 시 -> 전역 객체
2. 메서드 호출 시 -> 최상위 객체

//this 
//단순 호출 시
const myFunc = function () {
  return this 
}

console.log(myFunc()) //Window가 출력이 된다.

DOM조작할 때 최상위가 document였는데 그것보다 상위는 Window임

// 메서드 호출 시 this


화살표 함수는 자신만의 this를 가지지 않는다. 
js에서 this는 함수가 호출되는 방식에 따라 결정되는 
현재 객체를 나타냄
python의 self와 java의 this는 선언 시 값이 이미 정해지는 것에 비해
js의 this는 함수가 호출되기 전까지 값이 할당되지 않고
호출 시에 결정됨(동적)

object