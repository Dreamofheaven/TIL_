
리팩토링 
파일 이름을 주제로 하는게 어떨까?
git이라는 내용의 정리일 수도 있다.
계속 add를 하면 내용이 많아질 텐데 폴더로 미리 구분하는게 어떤지?
Git/git_기초.md
    GitHub_활용.md
jaeYubHan? 깃허브 bigginer 


#깃헙 프로필 리드미 

1) 프로필이라는 폴더 생성 README.md 파일에 자기소개를 작성
이 자기소개는 
2) Git 버전 만들기
3) 진짜 중요!! GitHub 원격 저장소 만들기 -> 저장소 이름은 여러분의 깃헙 유저 네임이여야한다.
4) 만든사람은 노션에 업데이트 plz

<브랜치>
브랜치를  사용하는 이유는?
시간축 플로우 
협업
에를 들어, 네이버 홈 개발팀에 개발자가 10명이 있으면, 소스코드가 파일 하나예요, 예를 들면
이거를 작업을 하는데, 커밋을 한줄기로밖에 못한다고 했는데 내 작업 흐름을 쭉 가져가기 어렵다
깃 플로우에서 보여지고 있는게, 깃은 브랜치라는 개념을 통해서 브랜치를 나눠서 커밋을 쌓아나가다가 
합치고, 기능 개발 다 했으면 합쳐 이런 것들이 계속 반복적으로 발생하게 됩니다.

진짜 독립적인 작업환경이 어떤 느낌인지 보여드리겠습니다.
<브랜치 주요 명령어>
1. 브랜치 생성
2. 브랜치 이동
3. 브랜치 생성 및 이동
4. 브랜치 목록
5. 브랜치 삭제 


1. 메인페이지 만들기
git branch feature/main
git checkout feature/main

마스터로 돌아갔을 때 어떻게 되어있을지, 돌아가보면 리드미. md

브랜치를 합친다. 깃머지 피쳐메인 
마스터가 가지고 있는 의미를 설명해드릴 것이다.
다른 브랜치들 끼리도 병합할 수 있다. 

조모임을 딥하게 하는데, 
조장 - 조원 : 조모임의 목표는 보고서 작업과 발표자료르르 만들어서 교수님께 제출하는게 조모임의 과제
업무 배분하는 법은 3가지 방법임

같은 파일이 수정되면, 조장이 파일을 비교하고 적절하게 완성시킨다.

1. fast forward (조장 혼자서 작업)
home이라는 기능을 만든가고 하자.
가장 먼저, 
$ git branch 
    feature/home
$ git checkout feature/home
$ git checkout master
$ touch home.txt
$ git status
$ git add .

$ git commit -m 'complete home'

먼저는 브랜치 생성 
$git brack feature/home
$ git branch
브랜치 이동
$ git checkout feature/home
$ touch home.txt
$ git add .
$ git status
$ git commit -m 'Update home'
$ git checkout master 
마스터 브랜치에 병합해야함 
마스터 브랜치로 병합을 시킬거니까, 이 명령을 마스터에서 해야함 
$ git merge feature/home
$ git log --oneline
 
2. 각각 배분해서 일하는거 각각 다른 브랜치의 작업물들이 있는데 이거를 합치는거 서로 다른 파일들이 수정이 되었다.
$ git branch 브랜치 확인임
$ git branch -d feature/home
$ git checkout fsdfsdf
$ git checkout -b feature/home 
이제 리포트 작업을 하는거임 옮기면서 만들엊기
$ touch report.hwp
$ git add .
$ git commit -m 'complete'
$ git log --oneline

$ git checkout master 
$ git log --oneline
$ touch hotfix.txt
$ git add .
$ git commit -m 'hotfix!'
$ git log --oneline

이제 머지 마스터에서해야함
병합한거는 과감히 지워도 된다.
 
3. 둘다 하는거? 동일 파일 수정 
README.md를 모두 수정 

$ git checkout -b ppt
$ touch ppt.pptx
$ git status
$ git add .
$ git commit -m 'complete ppt%update readme'
$ git log --oneline
$ git checkout master
핫픽스 내용 변경 
$ git add .
$ git status
$ git commit -m 'update readme & hotfix'
$ git log --oneline

파일이 수천개니까, 어떤 파일이 충돌한지 알고 싶은데 어떤 명령어를 입력하면 좋을까요?
$ git status
아직 버전이 만들어지기 전에 파일들의 상태를 봐야하니까, status를 입력하는 것이다..
두 군데에서 모두 수정된 파일인 readme.md가 있습니다라고 친절하게 알려준다. 

HEAD는 내가 있는 위치임, 이 부분이 충돌났어요 라고 알려주는 것이다.

git으로 개발프로젝트를 진행할텐데, 조장은 누가 해야할까? 합치는 작업들을 할텐데
깃 잘 활용하는 인간 


<git flow>
커밋의 가지치기, 협업을 하는 방법은 여러가지가 있는데, 각자 독립된 버전의 흐름을 만들 수 있다. 
-> 독립된 작업의 흐름이다.
이것의 전략이 있다는 것이다.

만약에 개발을 하는데, 지금이 12/29ㄹ 락 하면 
카카오톡 개발자들은 지금 뭘 준비하고 있을까?
개발 흐름이 하나라면, 쭉 개발을 해오면서 예를 들면, 설빔입은 춘식이를 개발하고 있어요
얘를 1월 1일에 공개할 내용인데, 쭉 개발을 하고 있느닏
갑자기 카톡에 큰 버그가 생겼어, 빨리 고쳐야해 라고 생각해서 버그를 고치는 행위를 했다고 할게요
이 상태에서 어 이 작업의 흐름의 코드를 이때의 사진을 외부에 공개해요.
아직 1월 1일이 안되었는데, 설빔춘식이라는 이 기능들도 외부에 같이 공개될 수 박에 없다. 독립된 작업 흐름이 없으니까
이것은 재난이다. 

핫픽스가 왜 이런식으로 구성되어있 는지 알 수 있따. 
릴리즈 브랜치 -> 버그를 찾고 검수를 한다. QA
마스터 브랜치 -> 모든 테스트가 끝나고 실제로 동작하는 코드들이 있는 상태
commit을 저장이랑 같다고 생각할 수 있는데, 다르다.
커밋은 하나의 버전이다. 내가 개발하다가 만 것을 거밋하면 안된다. 
기능 구현이 끝나지 않았는데 커밋을 하게 되면 안된다.ㅏ 
다 개별적인 버전이다. 나중에 그 상태를 롤백할 수도 있다.
어떠한 순간들에게 기존에 어떤 버전이 있었는지 볼  수도 있으니까
의미있는 순간들로 봐야한다.

깃을 정리 문서를 작성하고 있는데 중간에 밥을 먹으러 가야함 30프로 햇음
이때 커밋을 하면 안된다. 이거는 그냥 파일 저장해놓ㄱ 밥 먹고 오면 된다. 
그러다가 100프로 다 하면 이떄 커밋을 해야한다는거예요
그래서 깃플로우라고 하는 것을 개발을 해보지 않은 입장에서
그나마 이해할 수 있는 형태로 설명을 드렷습니다 

깃헙 플로우 법칙 
마스터 브랜치는 반드시 배포가능한 상태여야한다. 온전한 코드여아한다는 것이다. 
커밋메세지는 매우 중요하며 명확하게 작성한다. 
풀 리퀘스트를 통해 협업을 진행한다. 
깃허브에서 제시하는 모델은 2가지가 있는데 가장 큰 차이점은
원격 저장소에 내가 푸쉬 권한이 있는지, 하나하나씩 설명 드려보도록 하겠습니다.

가장 먼저 해야하는 거는 브랜치를 먼저 나눈다. 
브랜치 만드는 명령어 ?
컨펌 머지 

1. 브랜치 만들고 2. 작업 3. 커밋 4. 로컬에서 마스터로 이동해서 병합 
-> 이거는 내가 혼자 작업할 때의 모습이고

<깃헙 플로우>
1. 브랜치 만들기 2. 작업 3. 커밋까지 동일 
4. 깃허브로 브랜치를 push한 다음에 
5. pull request를 생성 (풀 리퀘스트는 이것좀 땡겨가줘를 요청하는거임)
6.  merge (5번 6번 사이에는 코드 리뷰 과정이 있다.)

마스터로 이동해서 git checkout mater 
병합이 깃헙에서 일어나서 마스터에는 라이프 가 없다. 
그래서 풀로 받아와야함  

#조모임 

리뷰만 더 중심적으로 가져가는 사람이 있따고??
아 약간 집중 못해서 이해가 안된다. 
여러분들이 실제로 협업을 이렇ㄱ 진행하는 순간은 지금으로부터 3개워뒤에
이런 모습을 가지고 갈거예요 혼자 작업을 하거나
페어프로그래밍을 진행할거라서 3개울 뒤에 이런 모습으로 핡러다
오늘 실습은 무엇으로 할건가요?
포크라는건데 

<pork & pr>
$ git push origin master 
자기꺼에 자기가 푸쉬한거임 



